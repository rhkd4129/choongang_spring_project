<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.oracle.s202350101.TaskMapper">    <!-- 도넛 그래프 그려주는 -->    <select id="doughnut_chart" parameterType="int" resultType="int">        SELECT COUNT(*) AS TASK_STATUS_COUNT            FROM TASK            WHERE PROJECT_ID = #{project_id}            GROUP BY TASK_STATUS            ORDER BY TASK_STATUS    </select>    <!--프로젝트 전체 기간 보여주는 -->    <select id="project_day" parameterType="PrjInfo" resultType="PrjInfo">        select project_startdate,project_enddate        from  prj_info        where project_id = #{project_id}    </select>    <!-- 진척률 그래프 -->    <select id="workload_chart" parameterType="java.lang.Integer" resultType="Task">    <![CDATA[        SELECT U.USER_NAME,               SUM(CASE WHEN T.TASK_STATUS = 0 THEN 1 ELSE 0 END) AS STATUS_0_COUNT,               SUM(CASE WHEN T.TASK_STATUS = 1 THEN 1 ELSE 0 END) AS STATUS_1_COUNT,               SUM(CASE WHEN T.TASK_STATUS = 2 THEN 1 ELSE 0 END) AS STATUS_2_COUNT        FROM TASK T, USER_INFO U        WHERE T.PROJECT_ID = #{project_id} AND T.USER_ID = U.USER_ID        GROUP BY U.USER_NAME        ]]></select>    <!--  작업 리스트  -->    <select id="task_list"  parameterType="Task" resultType="Task">        SELECT *        FROM (                 SELECT rownum rn, a.*                 From (SELECT t.*, p.project_s_name, u.user_name                       FROM task t                                INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq                                INNER JOIN user_info u ON t.user_id = u.user_id                       WHERE t.project_id = #{project_id} AND t.garbage = 0) a             )        where rn between #{start} and #{end}    </select>    <!-- 작업의 총 개수 반환 -->    <select id="task_count" parameterType="java.lang.Integer" resultType="java.lang.Integer">        SELECT COUNT(TASK_ID)        FROM TASK        WHERE PROJECT_ID = #{project_id}    </select>    <!-- 작업 리스트에 시간 순으로 정렬(내림,올림) -->    <select id="task_time_decs" parameterType="Task" resultType="Task">        SELECT *        FROM (SELECT rownum rn, a.*              From (SELECT t.*, p.project_s_name, u.user_name                    FROM task t                             INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq                             INNER JOIN user_info u ON t.user_id = u.user_id                    WHERE t.project_id = #{project_id} AND t.garbage = 0                    ORDER BY t.task_end_itme desc) a             )        where rn between #{start} and #{end}    </select>    <select id="task_time_aces" parameterType="Task" resultType="Task">        SELECT *        FROM (SELECT rownum rn, a.*              From (SELECT t.*, p.project_s_name, u.user_name                    FROM task t                             INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq                             INNER JOIN user_info u ON t.user_id = u.user_id                    WHERE t.project_id = #{project_id} AND t.garbage = 0                    ORDER BY t.task_end_itme asc ) a             )        where rn between #{start} and #{end}    </select>    <!-- 작업 상세 내역 리스트 유저이름과 프로젝트 단계까지 보여주기 위해서 조인 -->    <select id="task_detail" parameterType="java.lang.Integer" resultType="Task">        select u.user_name,p.project_s_name ,t.*            from task t,  prj_step p , user_info u            where t.user_id = u.user_id and                t.project_id  = p.project_id and                t.project_step_seq  = p.project_step_seq and                t.task_id = #{task_id} and t.project_id =#{project_id}    </select>    <!-- 인원별 타임라인 -->    <select id="task_timeline" resultType="Task">        SELECT T.*, U.USER_NAME        FROM TASK T, USER_INFO U        WHERE T.USER_ID = U.USER_ID    </select>    <!-- TASK CREATE -->    <!-- GET FORM  작업 생성 폼에 현재 프로젝트에 있는 프로젝트 단계보여주기  -->    <select id="task_create_form_step_list" parameterType="java.lang.Integer" resultType="PrjStep">        SELECT *        FROM PRJ_STEP        WHERE PROJECT_ID = #{project_id}    </select>    <!-- GET FORM 작업 생성 폼에 현재 프로젝트에 있는 인원들(같이 작업할 사람 선택하는 것) -->    <select id="task_create_form_worker_list" parameterType="java.lang.Integer" resultType="Userinfo">        SELECT USER_NAME, USER_ID        FROM USER_INFO        WHERE PROJECT_ID =  #{project_id}    </select>    <!-- 작업 생성 INSERT 문 -->    <insert id="task_create" parameterType="Task">        INSERT INTO TASK (TASK_ID, PROJECT_ID, PROJECT_STEP_SEQ, USER_ID, TASK_SUBJECT, TASK_CONTENT, TASK_STAT_TIME, TASK_END_ITME, TASK_PRIORITY, TASK_STATUS, GARBAGE)        VALUES ((SELECT NVL(MAX(TASK_ID), 0) +1 FROM TASK), #{project_id}, #{project_step_seq}, #{user_id}, #{task_subject}, #{task_content},                TO_DATE(#{task_stat_time}, 'YYYY-MM-DD'), TO_DATE(#{task_end_itme}, 'YYYY-MM-DD'), #{task_priority}, #{task_status}, #{garbage})    </insert>    <!--  작업 생성시 같이 할 작업자를 선택 하는 거 -->    <insert id="task_worker_create" parameterType="java.util.List">        <selectKey keyProperty="task_id" resultType="int" order="BEFORE" >            SELECT NVL(MAX(TASK_ID), 0) FROM TASK        </selectKey>        INSERT ALL        <foreach collection="list" item="taskSub" separator=" ">            into task_sub (                    task_id,                    project_id,                    worker_id            )values(                    #{task_id},                    #{taskSub.project_id},                    #{taskSub.worker_id}            )        </foreach>           SELECT * FROM dual    </insert>    <!-- 같이 하는 작업자 목록들 (상세 페이지에서 보여주기 )-->    <select id="taskWorkerlist" parameterType="TaskSub" resultType="TaskSub">        SELECT *            FROM TASK_SUB  t, user_info u                WHERE t.task_id = #{task_id} and                      t.project_id = #{project_id} and                      t.worker_id = u.user_id    </select>    <!-- 휴지통으로 이동(삭제) -->    <update id="task_garbage" parameterType="Task">        UPDATE TASK        SET GARBAGE = 1        WHERE project_id = #{project_id} and TASK_ID = #{task_id}    </update>    <!-- 휴지통에서 복구 시키기 -->    <update id="task_restore" parameterType="Task">        UPDATE TASK        SET GARBAGE = 0        WHERE TASK_ID = #{task_id} and PROJECT_ID = #{project_id}    </update>    <!-- 휴지통 목록 -->    <select id="garbage_list" parameterType="Task" resultType="Task">        SELECT *        FROM (                 SELECT rownum rn, a.*                 FROM (                          SELECT U.USER_NAME, T.*, P.PROJECT_S_NAME                          FROM TASK T                                   INNER JOIN PRJ_STEP P ON T.PROJECT_ID = P.PROJECT_ID AND T.PROJECT_STEP_SEQ = P.PROJECT_STEP_SEQ                                   INNER JOIN USER_INFO U ON T.USER_ID = U.USER_ID                          WHERE T.PROJECT_ID = #{project_id} AND T.GARBAGE = 1                      ) a             )        WHERE rn BETWEEN #{start} AND #{end}    </select>    <!-- 휴지통에 잇는 작업의 개수 -->    <select id="garbage_count" parameterType="java.lang.Integer" resultType="java.lang.Integer">        SELECT COUNT(TASK_ID)        FROM TASK        WHERE PROJECT_ID = #{project_id} and garbage = 1    </select>    <!--휴지통에서 영구 삭제 시키기 -->    <delete id="task_delete" parameterType="Task">        DELETE        FROM TASK        WHERE project_id = #{project_id} AND TASK_ID = #{task_id}    </delete></mapper>