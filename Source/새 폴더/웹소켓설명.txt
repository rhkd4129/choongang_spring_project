	채팅: 메시지를 실시간으로 보내고 받을 수 있어야 한다.
		ajax를 사용한다고 했을 때, 메시지 송신 시에는 문제가 없다.
		하지만, 요청이 있어야 응답이 있기에 메시지 수신의 경우 요청을 보낼 기준이 없어 문제가 발생한다.

		HTTP는 비연결 지향이고, 단방향 통신이기 때문에 서버가 먼저 보내는 요청은 클라이언트가 받을 수 없다.

		웹소켓은 양방향 통신 프로토콜로서 양방향에서 데이터를 주고 받을 수 있다.
		HTTP와 같이 연결을 위한 작업을 하지만, HTTP와 달리 처음 연결시에만 하고 연결을 유지한다.
		덕분에 HTTP에 비해 전송하는 데이터의 양이 적다.
		
		위와 같은 이유로 웹소켓을 사용한다.



	STOMP: Simple Text Oriented Messaging Protocol
		메시지 브로커를 활용해 쉽게 메시지를 주고 받을 수 있는 프로토콜

		pub-sub의 구조(발행-구독): 발신자가 메시지를 발행하면, 수신자가 그것을 		수신하는 메세징 패러다임
			메시지 브로커: 발신자의 메시지를 받아와 수신자들에게 메시지를 전달하는 	것
		웹 소켓 위에 얹어 함께 사용 가능한 하위 프로토콜

		왜 필요한가:
			사용자 정의 메시징 프로토콜과 메시지 형식을 만들 필요가 없습니다.

			선택적으로 메시지 브로커(예: RabbitMQ, ActiveMQ 등)를 사용하여 구독 및 브로드캐스트 메시지를 관리할 수 있습니다.

			애플리케이션 로직은 원하는 수의 인스턴스로 구성될 수 있으며 지정된 연결에 대해 @Controller단일 원시 WebSocket 메시지를 처리하는 대신 STOMP 대상 헤더를 기반으로 메시지를 라우팅할 수 있습니다 .WebSocketHandler

			웹 소캣을 사용하면, 클라이언트와 서버가 어떤 형식의 메시지를 주고받는지, 메시지별로 타입을 정의해야 하기 때문이다.