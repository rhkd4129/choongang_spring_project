<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.oracle.s202350101.TaskMapper">    <!-- 도넛 그래프 -->    <select id="doughnut_chart" parameterType="int" resultType="int">        SELECT COUNT(*) AS TASK_STATUS_COUNT            FROM TASK            WHERE PROJECT_ID = #{project_id}            GROUP BY TASK_STATUS            ORDER BY TASK_STATUS    </select>    <!--프로젝트 전체 기간 그래ㅔㅍ-->    <select id="project_day" parameterType="PrjInfo" resultType="PrjInfo">        SELECT            project_startdate,project_enddate        FROM            prj_info        WHERE            project_id = #{project_id}    </select>    <!-- 진척률 그래프 -->    <select id="workload_chart" parameterType="java.lang.Integer" resultType="Task">    <![CDATA[        SELECT U.USER_NAME,               SUM(CASE WHEN T.TASK_STATUS = 0 THEN 1 ELSE 0 END) AS STATUS_0_COUNT,               SUM(CASE WHEN T.TASK_STATUS = 1 THEN 1 ELSE 0 END) AS STATUS_1_COUNT,               SUM(CASE WHEN T.TASK_STATUS = 2 THEN 1 ELSE 0 END) AS STATUS_2_COUNT        FROM            TASK T, USER_INFO U        WHERE            T.PROJECT_ID = #{project_id} AND T.USER_ID = U.USER_ID        GROUP BY U.USER_NAME        ]]>	</select>    <!-- 대시보드 홈에서 현재 프로젝트에 속해잇는 프로젝트 단계 목록 가져오기 -->    <select id="project_step_select" parameterType="java.lang.Integer" resultType="prjstep">        select project_step_seq,project_s_name        from prj_step        where project_id = #{project_id}        order by project_order asc    </select>    <!-- 프로젝트 단계별 작업 목록 보여주기  -->    <select id="project_step_chart" parameterType="java.lang.Integer" resultType="task">        select            P.project_step_seq , p.project_s_name , t.task_id,t.project_id,t.user_id,t.task_subject,t.task_priority,t.task_status        from            task t, prj_step p        where            t.project_id = ${project_id} and            p.project_step_seq = t.project_step_seq and            t.project_id = p.project_id        order by            create_date desc    </select>    <!--  작업 리스트  -->    <select id="task_list" parameterType="Task" resultType="Task">        SELECT *            FROM (                SELECT rownum rn, a.*                    FROM (                        SELECT t.*, p.project_s_name, u.user_name                            FROM task t                                INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq                                INNER JOIN user_info u ON t.user_id = u.user_id                                WHERE t.project_id = #{project_id} AND t.garbage = 0 and                                <choose>                                    <when test="keyword_division == 'task_subject'">                                        t.task_subject like '%' || #{keyword} || '%'                                    </when>                                    <when test="keyword_division == 'project_s_name'">                                        p.project_s_name like '%' || #{keyword} || '%'                                    </when>                                    <when test="keyword_division == 'user_name'">                                        u.user_name like '%' || #{keyword} || '%'                                    </when>                                    <otherwise>                                        1=1                                    </otherwise>                                </choose>                                order by t.create_date desc                                ) a        )        WHERE rn BETWEEN #{start} AND #{end}    </select>    <!-- 현재 프로젝트의 작업 총개수  keyword_division과 keyword의 유무에 따라 검색기능 추가  -->    <select id="task_count" parameterType="Task" resultType="java.lang.Integer">        SELECT count(*)        FROM task t        INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq        INNER JOIN user_info u ON t.user_id = u.user_id        where  t.project_id = #{project_id} AND t.garbage = 0 and        <choose>            <when test="keyword_division == 'task_subject'">                t.task_subject like '%' || #{keyword} || '%'            </when>            <when test="keyword_division == 'project_s_name'">                p.project_s_name like '%' || #{keyword} || '%'            </when>            <when test="keyword_division == 'user_name'">                u.user_name like '%' || #{keyword} || '%'            </when>            <otherwise>                1=1            </otherwise>        </choose>    </select>    <!-- 작업 리스트에 시간 순으로 정렬(내림,올림) -->    <select id="task_time_decs" parameterType="Task" resultType="Task">        SELECT *        FROM (SELECT rownum rn, a.*              From                  (SELECT t.*, p.project_s_name, u.user_name                    FROM task t                             INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq                             INNER JOIN user_info u ON t.user_id = u.user_id                    WHERE t.project_id = #{project_id} AND t.garbage = 0 AND                    <choose>                        <when test="keyword_division == 'task_subject'">                            t.task_subject like '%' || #{keyword} || '%'                        </when>                        <when test="keyword_division == 'project_s_name'">                            p.project_s_name like '%' || #{keyword} || '%'                        </when>                        <when test="keyword_division == 'user_name'">                            u.user_name like '%' || #{keyword} || '%'                        </when>                        <otherwise>                            1=1                        </otherwise>                    </choose>                    ORDER BY t.task_end_time desc) a             )        where rn between #{start} and #{end}    </select>    <select id="task_time_aces" parameterType="Task" resultType="Task">        SELECT *        FROM (            SELECT rownum rn, a.*              From                  (SELECT t.*, p.project_s_name, u.user_name                    FROM task t                             INNER JOIN prj_step p ON t.project_id = p.project_id AND t.project_step_seq = p.project_step_seq                             INNER JOIN user_info u ON t.user_id = u.user_id                    WHERE t.project_id = #{project_id} AND t.garbage = 0 AND                    <choose>                        <when test="keyword_division == 'task_subject'">                            t.task_subject like '%' || #{keyword} || '%'                        </when>                        <when test="keyword_division == 'project_s_name'">                            p.project_s_name like '%' || #{keyword} || '%'                        </when>                        <when test="keyword_division == 'user_name'">                            u.user_name like '%' || #{keyword} || '%'                        </when>                        <otherwise>                            1=1                        </otherwise>                    </choose>                    ORDER BY t.task_end_time ) a             )        where rn between #{start} and #{end}    </select>    <!-- 작업 상세 내역 리스트 유저이름과 프로젝트 단계까지 보여주기 위해서 조인 -->    <select id="task_detail" parameterType="java.lang.Integer" resultType="Task">        SELECT                u.user_name,p.project_s_name ,t.*        FROM                task t,prj_step p, user_info u        WHERE                t.user_id = u.user_id and                t.project_id  = p.project_id and                t.project_step_seq  = p.project_step_seq and                t.task_id = #{task_id} and t.project_id =#{project_id}    </select>    <!--  작성 상세 내역에서 첨부파일 보여주기  -->    <select id="task_attach_list" parameterType="java.lang.Integer" resultType="TaskAttach">        SELECT *        FROM            task_attach        WHERE             task_id = #{task_id} and             project_id = #{project_id}    </select>    <!-- 인원별 타임라인 -->    <select id="task_timeline" parameterType="java.lang.Integer" resultType="Task">        SELECT            T.*, U.USER_NAME        FROM            TASK T, USER_INFO U        WHERE            T.project_id = #{project_id} and            T.USER_ID = U.USER_ID and             T.GARBAGE = 0    </select>    <!-- TASK CREATE -->    <!-- GET FORM  작업 생성 폼에 현재 프로젝트에 있는 프로젝트 단계보여주기  -->    <select id="task_create_form_step_list" parameterType="java.lang.Integer" resultType="PrjStep">        SELECT *        FROM            PRJ_STEP        WHERE            PROJECT_ID = #{project_id}    </select>    <!-- GET FORM 작업 생성 폼에 현재 프로젝트에 있는 인원들(같이 작업할 사람 선택하는 것) -->    <select id="task_create_form_worker_list" parameterType="java.lang.Integer" resultType="Userinfo">        SELECT            USER_NAME, USER_ID        FROM            USER_INFO        WHERE            PROJECT_ID =  #{project_id} and            USER_NAME != 'admin'    </select>    <!-- 작업 생성 INSERT 문 -->    <insert id="task_create" parameterType="Task">        INSERT INTO TASK (APP_ID, TASK_ID, PROJECT_ID, PROJECT_STEP_SEQ, USER_ID, TASK_SUBJECT, TASK_CONTENT, TASK_START_TIME, TASK_END_TIME, TASK_PRIORITY, TASK_STATUS, GARBAGE, CREATE_DATE)        VALUES (5,(SELECT NVL(MAX(TASK_ID), 0) +1 FROM TASK where project_id = #{project_id}),                #{project_id}, #{project_step_seq}, #{user_id}, #{task_subject}, #{task_content},                TO_DATE(#{task_start_time}, 'YY-MM-DD'), TO_DATE(#{task_end_time}, 'YY-MM-DD'), #{task_priority}, #{task_status}, #{garbage}, sysdate)    </insert>    <!--  작업 생성시 같이 할 작업자를 선택 하는 거 -->    <insert id="task_worker_create" parameterType="java.util.List">        <selectKey keyProperty="task_id" resultType="int" order="BEFORE" >            (SELECT NVL(MAX(TASK_ID), 0) FROM TASK WHERE project_id = #{list[0].project_id})        </selectKey>        INSERT ALL        <foreach collection="list" item="taskSub" separator=" ">            INTO task_sub (            task_id,            project_id,            worker_id            ) VALUES (            #{task_id},            #{taskSub.project_id},            #{taskSub.worker_id}            )        </foreach>           SELECT * FROM dual    </insert>    <!--첨부파일 테이블의 현재 max값을 가져옴-->    <select id="taskAttach_max" parameterType="java.lang.Integer" resultType="java.lang.Integer">        (SELECT NVL(MAX(attach_no), 0)  FROM TASK_ATTACH where task_id = #{task_id})    </select>    <insert id="taskAttach_create" parameterType="java.util.List">        <selectKey keyProperty="task_id" resultType="int" order="BEFORE">            (SELECT NVL(MAX(TASK_ID), 1)FROM TASK WHERE project_id = #{list[0].project_id})        </selectKey>        INSERT ALL        <foreach collection="list" item="taskAttach" separator=" ">            INTO task_attach (task_id, project_id, attach_no, attach_name, attach_path)            VALUES            (                #{task_id},                #{taskAttach.project_id},                #{taskAttach.attach_no},                #{taskAttach.attach_name},                #{taskAttach.attach_path}            )        </foreach>        SELECT * FROM dual    </insert>    <update id ="task_update" parameterType="Task">        UPDATE            task        SET            project_step_seq =#{project_step_seq},            task_subject = #{task_subject},            task_content = #{task_content},            task_start_time =#{task_start_time},            task_end_time = #{task_end_time},            task_priority = #{task_priority},            task_status = #{task_status}        WHERE            task_id =#{task_id} and  project_id =#{project_id}    </update>    <!--- tasksub를 업데이트 하려면 예륻 들어서 4명의 공동작업자가 잇는 상태에서 수정을 하게 되면 0명이될수도, 6명이 될수도     -> 가변적으로 업데이트의 행수가 바뀌게 되기ㄸ 때문에 우선 해당 작업의 잇는 작업자들을 delete후 , update진행    -->    <!-- 1. 먼저 해당 작업의 작업자들을 다시 삭제(초기화)-->    <delete id="task_worker_init" parameterType="tasksub">        DELETE        FROM            TASK_SUB        WHERE            task_id = #{task_id}            and project_id = #{project_id}    </delete>    <!--  2. 작업 생성시 같이 할 작업자를 선택 하는 거 -->    <insert id="task_worker_update" parameterType="java.util.List">        INSERT ALL        <foreach collection="list" item="taskSub" separator=" ">            into task_sub (                task_id,                project_id,                worker_id)           values(                #{taskSub.task_id},                #{taskSub.project_id},                #{taskSub.worker_id})        </foreach>        SELECT * FROM dual    </insert>    <insert id="task_attach_update" parameterType="java.util.List">        INSERT ALL        <foreach collection="list" item="taskAttach" separator=" ">            into task_attach(               task_id,               project_id,               attach_no,               attach_name,               attach_path)            values(                #{taskAttach.task_id},                #{taskAttach.project_id},                #{taskAttach.attach_no},                #{taskAttach.attach_name},                #{taskAttach.attach_path}            )        </foreach>        SELECT * FROM dual    </insert>    <!--- 1. 물리적으로 저장된 파일의 이름과 경로를 불러와서 파일삭제  ( FILE PATH와 NAEM만 SELECT만해와서 물리적 파일을 삭제함)-->    <select id="physical_file_delete" parameterType="taskAttach" resultType="taskAttach">        SELECT            *        FROM            task_attach        WHERE            task_id = #{task_id} AND            project_id = #{project_id} AND            attach_no =#{attach_no}    </select>    <!--- 2. DB상에서 파일을 삭제 -->    <delete id="task_attach_delete" parameterType="TaskAttach">        DELETE FROM            task_attach        WHERE            project_id = #{project_id} and            task_id = #{task_id} and            attach_no = #{attach_no}    </delete>    <!-- 같이 하는 작업자 목록들 (상세 페이지에서 보여주기 )-->    <select id="taskWorkerlist" parameterType="TaskSub" resultType="TaskSub">        SELECT *        FROM            TASK_SUB  t, user_info u        WHERE              t.task_id = #{task_id} and              t.project_id = #{project_id} and              t.worker_id = u.user_id    </select>    <!-- 휴지통으로 이동(삭제) -->    <update id="task_garbage" parameterType="Task">        UPDATE            TASK        SET            GARBAGE = 1        WHERE            project_id = #{project_id} and TASK_ID = #{task_id}    </update>    <!-- 휴지통에서 복구 시키기 -->    <update id="task_restore" parameterType="Task">        UPDATE            TASK        SET            GARBAGE = 0        WHERE            TASK_ID = #{task_id} and PROJECT_ID = #{project_id}    </update>    <!-- 휴지통 목록 -->    <select id="garbage_list" parameterType="Task" resultType="Task">        SELECT *            FROM (                     SELECT                         rownum rn, a.*                     FROM (                              SELECT                                  U.USER_NAME, T.*, P.PROJECT_S_NAME                              FROM TASK T                                       INNER JOIN PRJ_STEP P ON T.PROJECT_ID = P.PROJECT_ID AND T.PROJECT_STEP_SEQ = P.PROJECT_STEP_SEQ                                       INNER JOIN USER_INFO U ON T.USER_ID = U.USER_ID                              WHERE                                  T.PROJECT_ID = #{project_id} AND T.GARBAGE = 1                          ) a                 )        WHERE rn BETWEEN #{start} AND #{end}    </select>    <!-- 휴지통에 잇는 작업의 개수 -->    <select id="garbage_count" parameterType="java.lang.Integer" resultType="java.lang.Integer">        SELECT            COUNT   (TASK_ID)        FROM            TASK        WHERE            PROJECT_ID = #{project_id} and garbage = 1    </select>    <!--휴지통에서 영구 삭제 시키기 -->    <delete id="task_delete" parameterType="Task">        DELETE        FROM            TASK        WHERE            project_id = #{project_id} AND TASK_ID = #{task_id}    </delete></mapper>